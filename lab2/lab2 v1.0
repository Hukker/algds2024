#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define TEST_FAILURE -1
#define TEST_CORRECT 0

typedef struct tree {
	int n;
	struct tree* left;
	struct tree* right;
}tree;

//tree* root = NULL;

tree* create(int val) 
{
	tree* new_tree = (tree*)malloc(sizeof(tree));
	new_tree->left = NULL;
	new_tree->right = NULL;
	new_tree->n = val;
	return new_tree;
}

tree* insert(tree* node, int val)
{
	if (node == NULL) {
		tree* new_tree = (tree*)malloc(sizeof(tree));
		new_tree->left = NULL;
		new_tree->right = NULL;
		new_tree->n = val;
		return insert(new_tree, val);
	}
	if (val < node->n) {
		node->left = insert(node->left, val);
	}
	if (val > node->n) {
		node->right = insert(node->right, val);
	}
	return node;
}

tree* right_rotate(tree* node_cur) 
{
	tree* node1 = node_cur->left;
	node_cur->left = node1->right;
	node1->right = node_cur;
	return node1;
}

tree* left_rotate(tree* cur) 
{
	tree* tmp = cur->right;
	cur->right = tmp->left;
	tmp->left = cur;
	return tmp;
}

tree* splay(tree* root, int val) 
{
	if (root == NULL || root->n == val) {
		return root;
	}

	if (root->n > val) {
		if (root->left == NULL) {
			return root;
		}

		if (root->left->n > val) {
			root->left->left = splay(root->left->left, val);
			root = right_rotate(root);
		}
		else if (root->left->n < val) 
		{
			root->left->right = splay(root->left->right, val);
			if (root->left->right != NULL) {
				root->left = left_rotate(root->left);
			}
		}
		return (root->left == NULL) ? root : right_rotate(root);
	}

	else 
	{
		if (root->right == NULL) return root;
		if (root->right->n > val)
		{
			root->right->left = splay(root->right->left, val);
			if (root->right->left != NULL)
				root->right = right_rotate(root->right);
		}
		else if (root->right->n < val)
		{
			root->right->right = splay(root->right->right, val);
			root = left_rotate(root);
		}
		return (root->right == NULL) ? root : left_rotate(root);
	}

}

tree* search(tree* root, int val)
{
	return splay(root, val);
}

tree* search_min(tree* node) 
{
	if (node == NULL) {
		return node;
	}
	else if (node->left != NULL) {
		search_min(node->left);
	}
}

tree* delete(tree* node, int val) 
{
	if (node == NULL) {
		return node;
	}
	if (val < node->n) {
		node->left = delete(node->left, val);
	}
	else if (val > node->n) {
		node->right = delete(node->right, val);
	}
	else {
		if (node->left == NULL) {
			tree* tmp = node->right;
			free(node);
			return tmp;
		}
		else if (node->right == NULL) {
			tree* tmp2 = node->left;
			free(node);
			return tmp2;
		}
		tree* tmp3 = search_min(node->right);
		node->n = tmp3->n;
		node->right = delete(node->right, tmp3->n);
	}
	return node;
}



void print(tree* root, int k)
{
	int i;
	if (root != NULL)
	{
		print(root->right, k + 1);
		for (i = 0; i < k; i++) { 
			putchar(' ');
		}
		printf("%d\n", root->n);
		print(root->left, k + 1);
	}
}


void insert_test()
{
	tree* root = create(5);
	root = insert(root, 4);
	root = insert(root, 6);

	assert(root->left->n, 4);
	assert(root->left->n, 6);

	printf("INSERT test is PASSED\n");
}

void search_test() 
{
	tree* root = create(9);
	root->left = create(6);
	root->right = create(15);
	root->left->left = create(3);
	root->left->right = create(5);
	root = splay(root, 15);
	assert(root->n == 15);
	assert(root->left->n == 9);
	assert(root->left->left->n == 6);

	printf("SEARCH test is PASSED\n");


}

void delete_test() 
{
	tree* root = create(9);
	root->left = create(6);
	root->right = create(15);
	root->left->left = create(3);
	root->left->right = create(5);
	print(root, 1);

	assert(root->left->n, 5);
	assert(root->left->left, 3);

	printf("DELETE test is PASSED\n");
}

int main() {
	puts("Krekhov_d_5030102_20003_lab2_var8\n");

	delete_test();

	search_test();
	insert_test();
	/*
	tree* root = create(100);
	root = insert(root, 20);
	root = insert(root, 30);
	root = insert(root, 40);
	root = insert(root, 60);
	root = insert(root, 70);
	root = insert(root, 80);

	root = search(root, 20);
	printf("after search \n");

	print(root, 1);
	root = search(root, 40);
	printf("after search\n");
	print(root, 1);
	*/
	

	return 0;
}
